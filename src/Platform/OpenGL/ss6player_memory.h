/**
	SS6Player for CPP(C++/ssbp2)
	Platform: OpenGL(GLFW+GLEW)

	Copyright(C) Web Technology Corp.
	All rights reserved.
*/
/* ========================================================================== */
/* MEMO:                                                                      */
/* SS6Playerでヒープを扱うための基礎機能です。                                */
/* SS6Playerが内部的にヒープを必要とする場合に、本関数を通してヒープを取得し  */
/* ます。                                                                     */
/* 本クラスの機能群（主に関数）を仕様を併せて機種毎で実装することで、各機種対 */
/* 応が可能です。                                                             */
/*                                                                            */
/* ヒープの扱いとしてはmalloc/freeなので、コンストラクタの実行を必須とするク  */
/* ラスなどの領域を確保した場合、呼出元で配置newをするよう注意してください。  */
/* ※deleteも同様。                                                           */
/* ※できるだけ避けているのですが、シェーダ・バッファで一部使用しています。   */
/* ========================================================================== */
#pragma once

/* -------------------------------------------------------------------------- */
/*                                                 Includes / Compile-Options */
/* -------------------------------------------------------------------------- */
#include "ss6player_types.h"

namespace SpriteStudio6	{
/* -------------------------------------------------------------------------- */
/*                                                Defines (Value-Type Macros) */
/* -------------------------------------------------------------------------- */

/* -------------------------------------------------------------------------- */
/*                                            Classes / Structures / Typedefs */
/* -------------------------------------------------------------------------- */
/* メモリ管理 */
/* MEMO: 現状静的クラス仕様にしています。 */
class Memory
{
	/* ----------------------------------------------- Classes, Structs,Interfaces & Typedefs */ 
private:
protected:
public:

	/* ----------------------------------------------- Enums & Constants */
private:
protected:
public:

	/* ----------------------------------------------- Variables */
private:
	/* MEMO: privateについてはプラットフォーム毎で内容が変わっても問題ありません。 */
	/*       ※機種非依存部からはアクセスしません。                                */

protected:
public:
	/* MEMO: publicについてはプラットフォーム問わず同じである必要があります。 */

	/* ----------------------------------------------- Functions */
private:
protected:
public:
	/* ********************************************************* */
	//! ヒープの取得
	/*!
	@param	area
		ヒープしたエリア自体のポインタ（Free時に必要）
	@param	size
		ヒープするサイズ
	@param	alignment
		関数値のポインタに必要なメモリアライメント
		0 == 実装系に任せる（CPUに最適なアライメント）

	@retval	関数値
		実使用できる有効なメモリポインタ
	@retval	area
		実際にヒープされたメモリポインタ

	ヒープを取得します。
	実際に取得したヒープのポインタはareaになりますが、alignmentに
		即したポインタは関数値になります。
	※ヒープを解放（Free）する時に必要なのはareaになります。
	*/
	static void* Allocate(void** area, size_t size, size_t alignment=0);

	/* ********************************************************* */
	//! ヒープの解放
	/*!
	@param	area
		解放するヒープのエリア自体のポインタ（Free時に必要）

	@retval	なし

	ヒープを解放します。
	*/
	static void Free(void* area);

	/* ********************************************************* */
	//! メモリ（サイズ・インデックス）をアライメント
	/*!
	@param	index
		サイズもしくはインデックス
	@param	alignment
		アライメントサイズ
		省略時: AlignmentMemory::SAFETY

	@retval	関数値
		アライメントされたサイズもしくはインデックス

	インデックスやサイズをアライメントします。
	主にメモリアライメントの解決に使用するので、Memoryに入ってい
		ますが、原則汎用のアライメント解決に使用可能です。
	*/
	static inline size_t Alignment(size_t index, size_t alignment=AlignmentMemory::SAFETY)
	{
		return(((index + (alignment - 1)) / alignment) * alignment);
	}

	/* ----------------------------------------------- Functions (static) */
private:
protected:
public:

	/* ----------------------------------------------- Operators */

	/* ----------------------------------------------- Friends */
};

/* -------------------------------------------------------------------------- */
/*                                                                  Variables */
/* -------------------------------------------------------------------------- */

/* -------------------------------------------------------------------------- */
/*                                    Inline-Functions / Function-Type Macros */
/* -------------------------------------------------------------------------- */

/* -------------------------------------------------------------------------- */
/*                                                        Function Prototypes */
/* -------------------------------------------------------------------------- */

}	/* SpriteStudio6 */
