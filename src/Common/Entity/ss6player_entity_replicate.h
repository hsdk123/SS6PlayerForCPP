/**
	SS6Player for CPP(C++/ssbp2)
	Platform: 

	Copyright(C) Web Technology Corp.
	All rights reserved.
*/
/* ========================================================================== */
/* MEMO:                                                                      */
/* SS6Playerでアニメーションオブジェクトの複製描画を行うためのクラスです。    */
/* 複製描画は、疑似的なインスタンス描画のようなもので、すでに当該フレームの更 */
/* 新（Update）を行い、アニメーションの状態が更新されている別のEntityの状態を */
/* 変形行列（位置・拡縮率・回転）などを変えて描画（Draw）だけを行うものです。 */
/* 画面中に「同じ状態のアニメーションオブジェクトを複数出したり」「VRなどの際 */
/* にカメラアングルだけ変えて、左右を別々に描画したり」する場合の、処理の軽減 */
/* に使用します。                                                             */
/* 原則として、他のEntityの描画のみを再度実行するためのクラスなので、アニメー */
/* ションや使用リソースの操作（個別の特殊化）などは、ほぼできません。         */
/* また、「インスタンス描画」のための処理ではありません（複製元のEntityが保持 */
/* している描画用モデルを、シェーダ定数を変更して・描画コマンドリストに再定義 */
/* するための機能です）。                                                     */
/*                                                                            */
/* 1つの本クラスで複製描画できるのは1回の描画までです（複数の複製描画を行うに */
/* は、行う複製描画の回数分の本クラスの実体が必要です）。                     */
/*                                                                            */
/* Entityと共通の機能はアクセスを似せてはいますが、本クラスはEntityやその基底 */
/* のLibrary::Control::Rootの派生でもないので、それらに多態することはできない */
/* ことに注意してください。                                                   */
/* ========================================================================== */
#pragma once

/* -------------------------------------------------------------------------- */
/*                                                 Includes / Compile-Options */
/* -------------------------------------------------------------------------- */
#include "ss6player_entity.h"

namespace SpriteStudio6	{
/* -------------------------------------------------------------------------- */
/*                                                Defines (Value-Type Macros) */
/* -------------------------------------------------------------------------- */

/* -------------------------------------------------------------------------- */
/*                                            Classes / Structures / Typedefs */
/* -------------------------------------------------------------------------- */
/* エンティティ（アニメーションオブジェクト）管理 */
class EntityReplicate
{
	/* ----------------------------------------------- Classes, Structs,Interfaces & Typedefs */
private:
protected:
public:

	/* ----------------------------------------------- Enums & Constants */
private:
	/* 再生時ステータス */
	enum FlagBitStatus : Uint32	{
		VALID = 0x40000000,

		CLEAR = 0x00000000,
	};

protected:
public:

	/* ----------------------------------------------- Variables */
private:
	Uint32 /* FlagBitStatus */ Status;					/* 再生ステータス */

	bool FlagHideForce;									/* 強制非表示 */
	ShaderData ConstantShader;							/* シェーダ定数 */

protected:
public:

	/* ----------------------------------------------- Functions */
private:
protected:
	/* MEMO: 継承体からは見えるようにしておきます。 */
	void CleanUp(void);

public:
	/* ********************************************************* */
	//! コンストラクタ
	/*!
	@param	なし

	@retval	なし
	*/
	EntityReplicate(void);

	/* ********************************************************* */
	//! デストラクタ
	/*!
	@param	なし

	@retval	なし

	本クラスを継承する場合を考慮して、仮想デストラクタになっています。
	*/
	virtual ~EntityReplicate(void);

	/* ********************************************************* */
	//! 本クラスが有効か？
	/*!
	@param	なし

	@retval	関数値
		true == 有効
		false == 無効

	本クラスが描画用として使用可能かを返します。
	具体的には、
	- BootUpが済んでいる
	ことがtrueを返す条件になります。
	*/
	bool IsValid(void);

	/* ********************************************************* */
	//! 本クラスの起動（初期起動）
	/*!
	@param	なし

	@retval	関数値
		true == 成功
		false == 失敗

	本クラスを起動します。
	※複製元のEntityの指定などは、Drawで行いますので、原則必要
		ありません。
	*/
	bool BootUp(void);

	/* ********************************************************* */
	//! 本クラスの終了（未使用化）
	/*!
	@param	なし

	@retval	なし

	本クラスの使用を終了し・解放可能な内部のワークなどを全て解放
		します。
	本関数終了後は（再度BootUpからの手順を行うことなしに）アニメー
		ションを扱うことはできません。
	本クラスを終了したとしても、複製元のEntityなどは連動して終了
		しませんので、注意してください。
	*/
	void ShutDown(void);

	/* ********************************************************* */
	//! 描画関数
	/*!
	@param	commandList
		描画情報を書き込むためのコマンドリスト
	@param	matrixProjection
		描画するためのプロジェクション行列
	@param	matrixView
		描画するためのビュー行列
	@param	matrixWorld
		描画するためのローカル→ワールド変換行列
	@param	entityOriginal
		複製元のエンティティ

	@retval	関数値
		更新されたコマンドリストの値
		※殆どのプラットフォームの場合引数と変わらないです。
		DrawCommandListInvalid == 失敗

	本クラスを使用して、複製元のエンティティを複製描画します。
	コマンドリスト生成の処理スレッドから呼び出してください。
	複製元のエンティティは、下記の状態である必要があります。
	- 他のエンティティの子であってはならない（必ず最親であること）。
	- 本関数を呼び出す前に正常にBootUp・PackSetが終了している。
	- 本関数を呼び出す前にUpdateが終了してる。
	- 本関数を呼び出す前にShutDownされていない。
	*/
	TypeDrawCommandList Draw(	TypeDrawCommandList commandList,
								const CPU::Matrix4x4& matrixProjection,
								const CPU::Matrix4x4& matrixView,
								const CPU::Matrix4x4& matrixWorld,
								Entity& entityOriginal
						);

	/* ----------------------------------------------- Functions (static) */
private:
protected:
public:

	/* ----------------------------------------------- Operators */

	/* ----------------------------------------------- Friends */
};

/* -------------------------------------------------------------------------- */
/*                                                                  Variables */
/* -------------------------------------------------------------------------- */

/* -------------------------------------------------------------------------- */
/*                                    Inline-Functions / Function-Type Macros */
/* -------------------------------------------------------------------------- */

/* -------------------------------------------------------------------------- */
/*                                                        Function Prototypes */
/* -------------------------------------------------------------------------- */

}	/* SpriteStudio6 */
