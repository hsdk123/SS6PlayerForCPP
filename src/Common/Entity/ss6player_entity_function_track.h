/**
	SS6Player for CPP(C++/ssbp2)
	Platform: 

	Copyright(C) Web Technology Corp.
	All rights reserved.
*/
/* ========================================================================== */
/* MEMO: 【注意!!】                                                           */
/* 本ヘッダはentity.hの一部です。（再生トラック操作関数群）                   */
/* 単独でincludeしないでください（一応コンパイルエラー防護はしているものの、  */
/* 内容が正常に適用されません）。                                             */
/* ※Entityクラスの機能が大きい巨大なため、各区分の機能を見通しやすくするため */
/*   に（C#のpartial的に）ファイルを分割してあるだけです。                    */
/* ========================================================================== */
/* -------------------------------------------------------------------------- */
/*                                                 Includes / Compile-Options */
/* -------------------------------------------------------------------------- */
#if defined(__SS6PLAYER_ENTITY_CLASS__)

/* -------------------------------------------------------------------------- */
/*                                                  Class Functions (Partial) */
/* -------------------------------------------------------------------------- */
// namespace SpriteStudio6	{
// class Entity	{
	/* ----------------------------------------------- Functions */
private:
	void TrackConnectPartsInvolveChildren(int idParts, int indexTrack);
	bool CursorSetMain(int indexTrack, float cursor);

protected:
public:
	/* ********************************************************* */
	//! 再生トラックの再生状態を取得
	/*!
	@param	indexTrack
		再生トラック番号
		-1 == 全トラックの内1つでも再生中なら再生中とみなす

	@retval	関数値
		true == 再生中
		false == 再生していない（or 失敗）

	指定された再生トラックがアニメーションを再生中（AnimationPlay
		～AnimationStopの間）であるかを返します。

	再生トラックやアニメーションエンティティが再生中かどうかを
		取得する場合、必ず本関数を使用してください。
	※特に再生トラックやエンティティのステータスを直接覗いたり
		しないでください（予告なく仕様や挙動の変更を行う可能性
		がある他、不確実な情報を返す場合があり得ます）。
	*/
	bool StatusGetPlay(int indexTrack);

	/* ********************************************************* */
	//! 再生トラックの一時停止状態を取得
	/*!
	@param	indexTrack
		再生トラック番号
		-1 == 再生中の全トラックが一時停止中の時のみ一時停止中とみなす

	@retval	関数値
		true == 一時停止中
		false == 一時停止していない（or 失敗・再生状態ではない）

	指定された再生トラックがアニメーション再生を一時停止しているか
		を返します。

	再生トラックやアニメーションエンティティが一時停止中かどうかを
		取得する場合、必ず本関数を使用してください。
	※特に再生トラックやエンティティのステータスを直接覗いたり
		しないでください（予告なく仕様や挙動の変更を行う可能性
		がある他、不確実な情報を返す場合があり得ます）。
	*/
	bool StatusGetPause(int indexTrack);

	/* ********************************************************* */
	//! 再生トラック数の取得
	/*!
	@param	なし

	@retval	関数値
		再生トラック数
		-1 == 失敗

	現在の再生トラック数を取得します。
	*/
	int CountGetTrack(void);

	/* ********************************************************* */
	//! 再生トラック数の変更（再生トラックの再起動）
	/*!
	@param	count
		再生トラック数（必ず1以上である必要があります）
	@retval	関数値
		true == 成功
		false == 失敗

	現在の再生トラック数を変更します。
	また、各トラックの再生状態は維持されます。
	ただし、本関数はエンティティからの各種コールバック中・並列
		動作スレッド・Entity::UpdateからEntity::Drawの区間などで
		呼出しないでください（スレッドセーフ以前に、コールバック中や
		並列スレッドから呼び出して良い類の内容の処理ではありません）。

	countが現在の再生トラック数と同じ場合、本関数は何も変更しません。
	ただし、下の再生トラック数より少ない場合、カットされた再生トラッ
		クの情報は失われます（再生しているトラックだけを先詰めで詰め
		るような処理はしていませんので、削られる分の再生トラックの
		状態と情報がそのまま失われます）。
	また、削除されたプレイトラックに接続されているパーツとの接続も
		切れます（その場合、パーツの接続対象再生トラックは「なし」に
		なりますので、正常なアニメーション再生を持続するには、パー
		ツに新しい再生トラックを接続する必要があります）。

	※本関数は現在（実装途中につき）非対応です。
	*/
	bool TrackReboot(int count);

	/* ********************************************************* */
	//! トラックにパーツを接続
	/*!
	@param	idParts
		パーツID
		-1 == 全パーツ対象
	@param	indexTrack
		再生トラック番号
	@param	flagInvolveChildren
		true == 指定IDパーツの子パーツにも適用
		false == 指定IDパーツのみに適用
		省略時: false

	@retval	関数値
		true == 成功
		false == 失敗

	指定パーツに適用するアニメーションを指定再生トラックで再生中の
		アニメーションにします。
	本機能を使うことで、「アニメーション合成」（複数のアニメーション
		を合成して表示する）機能を使用します。
	*/
	bool TrackConnectParts(int idParts, int indexTrack, bool flagInvolveChildren=false);

	/* ********************************************************* */
	//! 再生アニメーションを合成遷移
	/*!
	@param	indexTrack
		遷移元のアニメーションを再生しているトラック番号（マスタトラック）
	@param	indexTrackSlave
		遷移先のアニメーションを再生しているトラック番号（スレーブトラック）
		-1 == 現在行っている遷移をキャンセル
	@param	time
		遷移にかける時間（1.0f == 1秒）
		※必ず「0.0fより大きい値」である必要があります（負数及び0.0fは不許可）。
	@param	flagCancelPauseAfterTransition
		遷移完了時のマスタトラックの再生一時停止状態の扱い
		true == 再生トラックの一時停止を解除
		false == トラックの一時停止状態を保持

	@retval	関数値
		true == 成功
		false == 失敗

	トラックトランジション（アニメーションのクロスフェード）を開始
		します。

	マスタトラックのアニメーションに対して、スレーブトラックのアニ
		メーションを、時間経過に比例してブレンドしながら遷移（トラン
		ジション）します。
	移行はtime秒で終了し、移行後はスレーブでの再生状況はそのままマス
		タに移行し・スレーブは未再生状態になります（その時点で、直前
		までのマスタの再生状況は廃棄されます）。

	すでにトランジション状態にあるマスタトラックに対して「2つ目のス
		レーブトラックを指定（多重トランジション）」を行うことはでき
		ません（常にマスタとスレーブは一対一の関係である必要がありま
		す）。
	また、スレーブトラックに対して、別のトラックをスレーブに指定する
		こともできません（多段トランジションも行うことはできません）。
	ただし、複数のトランジションを同時に実行することは可能です。
	※例えば、「1がマスタで2がスレーブ」のトランジションと・「3がマス
		タで0がスレーブ」のトランジションは同時に実行することは可能
		です。その場合には、表示状態としては「1のパーツに接続されて
		いるパーツが、1と2のトランジションを」「3のパーツに接続されて
		いるパーツが、3と0のトランジションを」反映することになります。

	加えて、「スレーブ側で指定したトラックは、いずれのパーツに対しても
		TrackConnectParts関数で接続されていてはならない」ことが必須事
		項として挙げられます（そういった指定を行った場合の正常動作は保
		証しません。あくまでパーツ群はマスタトラックに接続してください）。

	マスタトラックは遷移前の（元）アニメーションで、スレーブは遷移後
		のアニメーションを再生するトラック番号です。
	indexTrackとindexTrackSlaveは、（後述のトランジションのキャンセル
		でない限り）「0 ～ CountGetTrack-1」の値である必要があります
		（0オリジンの番号です）。
	双方のトラックは、本関数の実行前までにAnimationPlay関数でそれぞれ
		のアニメーションが再生されている必要があります（本関数実行寸前
		でも構いません）。
	マスタとスレーブ双方とも再生していても・一時停止していても構いま
		せん。
	※つまり、双方のトラックとも再生状態であれば「アニメーションが動き
		ながらブレンド」しますし、双方のトラックとも一時停止していれば
		「マスタの一時停止したフレームからスレーブの先頭フレームへの
		補間」という動きになります（無論、どちらかが再生状態でどちらか
		が一時停止状態でも、相応のブレンドを行います）。

	ただし、最低でもスレーブトラックでアニメーションが再生状態（未再生
		でなく・かつAnimationStop状態でない。一時停止状態は問題ありま
		せん）にある必要があります。

	indexTrackSlaveに「-1」を指定すると、マスタトラックで実行されている
		トランジションを強制的に解除（キャンセル）します。
	キャンセルした場合、「トランジション自体がキャンセル」されますので、
		「スレーブの影響を一切受けない状態」になりますので注意してくだ
		さい（トランジションの影響を残したままキャンセルすることはでき
		ませんので、そういう挙動を望む場合はスレーブトラックのアニメー
		ションを一時停止か停止して後・トランジション終了を待つなりして
		ください。またトランジションを満了して終了させる場合AnimationStop
		関数を使用してください）。
	indexTrackに「-1」を設定することができるのは、「全トラックの遷移を
		解除する」場合のみで、その際にはindexTrackSlaveは必ず「-1」で
		ある必要があります。

	timeの単位は秒で、1.0で1秒を表します。
	このtimeは、トラックの再生速度の影響を受けません。
	影響を受けるのは、Entity::Updateで渡されるtimeElapsed（経過時間）
		のみです。

	トランジションは「必ずtimeで終了」し、その最中にマスタまたはスレーブ
		のアニメーション再生が終了状態になっても、必ず遷移にはtime秒の
		時間を要します（その期間、アニメーションもトランジションも終了し
		たことにはなりません。つまり、後述のトランジション終了のコール
		バックは、必ず本関数からtime後に起こることになります）。
	マスタとスレーブで再生されているアニメーションのブレンド率は、「本
		関数実行からの経過時間 / time」の値（0.0～1.0）になります。
	※トランジション中には、アニメーション全体の再生終了コールバック
		（FunctionPlayEnd）も働きません。再生終了コールバックは、全ての
		トラックでアニメーションが終了しており・全てのトランジションも
		終了している段階で発行されます。
	※もしEntity::UpdateのtimeElapsedと実際の経過時間が異なる場合は、
		timeElapsedの累積時間がtimeになるまでの期間、トランジションが
		働きます。

	flagCancelPauseAfterTransitionは、大半の場合、スレーブ側が一時停止
		状態にあった場合に有効な指定です。
	- trueの場合、トランジションが終了した段階で、トラックの一時停止状態
		を解除
	- falseの場合、トラックの一時停止状態を保持
	する仕様となっており、スレーブが一時停止していない状態では、どちら
		の設定でも挙動が変わらないことになります。
	※単にトランジション終了時に一時停止解除のためだけにコールバックを
		受け取るのは面倒だろう……との目的で設置されています（逆に、動き
		ながらブレンドしているアニメーションをトランジション終了時に一時
		停止するというシチュエーションについては、望まれる動きがアプリ
		ケーションの都合に左右される面が大きいと思われますため、コール
		バック同期で行うようにしてください）。

	トランジション終了のタイミングは、マスタトラックのCallBackPlayEndTrack
		に登録されている関数でコールバックを受けることができます（トラッ
		ク再生終了コールバック受領関数と同じになりますが、トランジション
		終了の場合スレーブトラック情報なども渡されますので、明確にどちらか
		の判別がつきます）。

	トラックトランジションのブレンド対象は、（SpriteStudio6上のアトリビュー
		トで）下記のパラメータになり、以外のアトリビュートはトランジション
		の対象になりません。
		- X/Y/Z座標
		- X/Y/Z軸回転
		- X/Yスケール（ローカルスケールは含みません）
	※いわゆるTRS（平行移動・回転・スケール）情報のみとなります。

	また、他のアニメーションから呼び出されているインスタンスアニメーション
		（子アニメーション）そのものは、トランジションの対象となりません
		（親のインスタンス「パーツ」までが正常動作保証範囲です）。
	通常の手段ではトランジションを子アニメーションに適用することはできませ
		んが、そのような運用をした場合の動作は「不定」が仕様です（仕様外動作
		となります）。
	*/
	bool TrackTransition(int indexTrack, int indexTrackSlave, float time, bool flagCancelPauseAfterTransition);

	/* ********************************************************* */
	//! 再生中のアニメーション番号を取得
	/*!
	@param	indexTrack
		再生トラック番号

	@retval	関数値
		アニメーション番号
		-1 == トラックは再生中ではない（or 失敗）

	指定トラックで再生中のアニメーション番号を取得します。
	*/
	int IndexGetAnimation(int indexTrack);

	/* ********************************************************* */
	//! パーツに接続されている再生トラック番号を取得
	/*!
	@param	idParts
		パーツID

	@retval	関数値
		再生トラック番号
		-1 == パーツに再生トラックが接続されていない（or 失敗）

	現在指定パーツに接続されている再生トラックを取得します。
	※命名上「Set/Get」の関係になっていませんが、TrackConnectParts
		関数の逆関数です。
	*/
	int IndexGetTrack(int idParts);

	/* ********************************************************* */
	//! スレーブ再生トラックの取得
	/*!
	@param	indexTrack
		再生トラック番号（マスタ）

	@retval	関数値
		スレーブ再生トラック番号
		-1 == 遷移中ではない（or 失敗）

	指定再生トラックをマスタトラックとして、トラックトランジション
		で合成遷移中のスレーブトラック番号を取得します。
	本関数を利用することで、指定トラックが遷移中であるかを確認する
		ことができます。
	*/
	int IndexGetTrackSlave(int indexTrack);

	/* ********************************************************* */
	//! 再生中のアニメーションのFPSを取得
	/*!
	@param	indexTrack
		再生トラック番号

	@retval	関数値
		アニメーションの再生FPS
		-1 == 失敗

	指定トラックで現在再生中のアニメーションのFPSを取得します。
	*/
	int FramePerSecondGet(int indexTrack);

	/* ********************************************************* */
	//! 再生中のアニメーション再生速度の変更
	/*!
	@param	indexTrack
		再生トラック番号
	@param	rateTime
		アニメーション再生速度（負数を与えると逆再生になります）
		1.0f==等速

	@retval	関数値
		true == 成功
		false == 失敗

	指定トラックで現在再生中のアニメーションの再生速度を上書変更
		します（相対変更ではありません）。
	*/
	bool RateTimeSet(int indexTrack, float rateTime);

	/* ********************************************************* */
	//! 再生中のアニメーション再生速度の取得
	/*!
	@param	indexTrack
		再生トラック番号
		-1 == 全再生トラック対象

	@retval	関数値
		現在のアニメーション再生速度
		quiet_NaN == 失敗

	指定トラックで現在再生中のアニメーションの再生速度を取得します。
	*/
	float RateTimeGet(int indexTrack);

	/* ********************************************************* */
	//! 再生中のアニメーション再生の残り再生回数の取得
	/*!
	@param	indexTrack
		再生トラック番号

	@retval	関数値
		残り再生回数
		0 == 無限ループ再生（終了しません）
		-1 == 再生中ではない（or 失敗）

	指定トラックで現在再生中のアニメーションの残り再生回数を取得
		します。
	回数は「現在再生中のものを1回」と数えますので、有限再生回数が
		指定されている場合は、必ず1以上の値が返ります。
	*/
	int PlayTimesGetRemain(int indexTrack);

	/* ********************************************************* */
	//! 再生カーソル位置最大値の取得
	/*!
	@param	indexTrack
		再生トラック番号

	@retval	関数値
		再生カーソル最大位置（1.0f == 1秒）
		quiet_NaN == 失敗

	再生中のアニメーションにおける、再生カーソル位置の最大値を
		取得します。
	再生カーソル位置は、現在再生中のアニメーションのタイムライン上
		での位置になります（フレームではなく秒単位です）。

	本関数は現実として、再生中アニメーションのタイムラインの長さを
		取得する関数です。
	ただし、アニメーションの再生指定が往復（PINGPONG）の場合、往路
		と復路は合計したタイムラインとして計算されるため、本関数の
		値も倍の長さになり・CursorGet関数で取得できる再生カーソル
		位置の値もその倍されたタイムライン上の値となります。
	*/
	float RangeGetCursor(int indexTrack);

	/* ********************************************************* */
	//! 再生カーソル位置の取得
	/*!
	@param	indexTrack
		再生トラック番号

	@retval	関数値
		現在の再生カーソル位置
		-1.0f == 再生開始待ち中
		quiet_NaN == 失敗

	再生中のアニメーションにおける、再生カーソル位置を取得します。
	指定トラックのアニメーションが諸事情により再生開始待ちの状態に
		ある場合、本関数は-1.0fを返します。
	*/
	float CursorGet(int indexTrack);

	/* ********************************************************* */
	//! 再生カーソル位置の設定
	/*!
	@param	indexTrack
		再生トラック番号
	@param	cursor
		再生カーソル位置

	@retval	関数値
		true == 成功
		false == 失敗

	再生中のアニメーションにおける、再生カーソル位置を設定します。
	本関数で設定した再生カーソル位置と、設定前に示していた再生カー
		ソル位置との間にある「ユーザデータ」「シグナル」は無視され
		ます（コールバックは行われません）。
	※本関数が実行された直後のEntity::Updateではユーザデータ・シグ
		ナルのコールバックが行われません（時間経過によるカーソル
		移動と異なりカーソル位置がジャンプするため、経過時間範囲が
		不正になり経過区間が特定できないため）。
	*/
	float CursorSet(int indexTrack, float cursor);

	/* ********************************************************* */
	//! 再生カーソル位置のフレームを取得
	/*!
	@param	indexTrack
		再生トラック番号

	@retval	関数値
		アニメーションの再生フレーム
		-1 == 失敗

	再生中のアニメーションにおける、再生カーソル位置をフレームで
		取得します。
	*/
	int CursorGetFrame(int indexTrack);

	/* ********************************************************* */
	//! 再生カーソル位置をフレームにスナップ
	/*!
	@param	indexTrack
		再生トラック番号
	@param	cursor
		再生カーソル位置

	@retval	関数値
		フレーム位置にスナップされた再生カーソル値
		quiet_NaN == 失敗

	指定トラックで再生中のアニメーションのFPSに併せて、cursorの
		値をフレームにスナップさせた値を返します。
	※指定トラックにスナップした再生カーソル値を設定する関数では
		ないので、注意してください。
	*/
	float CursorSnapFrame(int indexTrack, float cursor);

// };	/* Entity */
// }	/* SpriteStudio6 */

#endif	/* defined(__SS6PLAYER_ENTITY_CLASS__) */
