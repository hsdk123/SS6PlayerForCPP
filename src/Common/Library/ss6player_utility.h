/**
	SS6Player for CPP(C++/ssbp2)

	Copyright(C) Web Technology Corp.
	All rights reserved.
*/
/* ========================================================================== */
/* MEMO:                                                                      */
/* アニメーション再生の内部実装用ユーティリティ群です。                       */
/* ========================================================================== */
#pragma once

/* -------------------------------------------------------------------------- */
/*                                                 Includes / Compile-Options */
/* -------------------------------------------------------------------------- */
#include <ss6player_platform.h>

namespace SpriteStudio6	{
namespace Library	{
namespace Utility	{
/* -------------------------------------------------------------------------- */
/*                                                Defines (Value-Type Macros) */
/* -------------------------------------------------------------------------- */

/* -------------------------------------------------------------------------- */
/*                                            Classes / Structures / Typedefs */
/* -------------------------------------------------------------------------- */
/* 乱数関係 */
namespace Random	{
/* 乱数生成器（抽象クラス） */
/* MEMO: 乱数生成器はインタフェースだけ同じにして、実装に問わず扱えるようにしておきます。 */
/*       ※現在メルセンヌ＝ツイスタとXor-Shiftの2種類があります。                         */
/*                                                                                        */
/*       生成する乱数ロジック（本クラスの派生クラス）のインスタンスを作成して、本クラス定 */
/*       義の関数群を使用して乱数を得ます。                                               */
class Generator	{
	/* ----------------------------------------------- Classes, Structs,Interfaces & Typedefs */
private:
protected:
public:

	/* ----------------------------------------------- Enums & Constants */
private:
protected:
public:

	/* ----------------------------------------------- Variables */
private:
protected:
public:
	void* Pointer;										/* 任意ポインタ *//* ※エフェクトの内部処理で作られた実体の場合にはメモリハンドルが入ります */

	/* ----------------------------------------------- Functions */
private:
	inline void CleanUp(void)
	{
		Pointer = nullptr;
	}

protected:
public:
	/* ********************************************************* */
	//! コンストラクタ
	/*!
	@param	なし

	@retval	なし
	*/
	Generator(void)
	{
		CleanUp();
	}

	/* ********************************************************* */
	//! デストラクタ
	/*!
	@param	なし

	@retval	なし
	*/
	virtual ~Generator(void)
	{
		CleanUp();
	}

	/* ********************************************************* */
	//! 乱数種の初期化
	/*!
	@param	seed
		乱数の種

	@retval	なし

	本クラスの乱数の種を指定値を使用して初期化します。
	*/
	virtual void InitSeed(Uint32 seed) = 0;

	/* ********************************************************* */
	//! 乱数種の取得
	/*!
	@param	lengthList
		乱数種テーブルの長さ（要素数）格納先

	@retval	関数値
		乱数種テーブル
		nullptr == 種なし・取得非対応（もしくはエラー）
	@retval	lengthList
		乱数種テーブルの長さ（要素数）

	現在の乱数の種を取得します。
	*/
	virtual const Uint32* ListGetSeed(int* lengthList) = 0;

	/* ********************************************************* */
	//! 乱数の取得（Uint32幅）
	/*!
	@param	なし

	@retval	関数値
		Uint32幅の乱数値

	0x00000000～0xffffffffまでの値の乱数を取得します。
	*/
	virtual Uint32 RandomUint32() = 0;

	/* ********************************************************* */
	//! 乱数の取得（Float64幅）
	/*!
	@param	valueMax
		乱数の最大値

	@retval	関数値
		Float64の乱数値

	0～valueMaxまでの倍精度浮動小数の乱数を取得します。
	*/
	virtual Float64 RandomDouble(Float64 valueMax=1.0) = 0;

	/* ********************************************************* */
	//! 乱数の取得（Float32幅）
	/*!
	@param	valueMax
		乱数の最大値

	@retval	関数値
		Float32の乱数値

	0～valueMaxまでの単精度浮動小数の乱数を取得します。
	*/
	virtual Float32 RandomFloat(Float32 valueMax=1.0f) = 0;

	/* ********************************************************* */
	//! 乱数の取得（指定値まで）
	/*!
	@param	valueMax
		乱数の最大値

	@retval	関数値
		Sint32幅の乱数値

	0～valueMaxまでのSint32幅の乱数を取得します。
	*/
	virtual Sint32 RandomN(Sint32 valueMax) = 0;

	/* ----------------------------------------------- Operators */

	/* ----------------------------------------------- Friends */
};
}	/* Random */

/* テキスト関係 */
namespace Text	{
/* ********************************************************* */
//! テキストがnullptrか空関数かを判定
/*!
@param	text
	テキスト

@retval	関数値
	true == nullptrもしくは空文字
	false == 少なくとも1文字以上の有効な文字列

文字列の有効性を判定します。

C#のString.IsNullOrEmpty関数とほぼ同じ役割ですが、本関数は
	textが0x00で終端しているかについては判定しません（つ
	まり終端まで含めて「真に有効な文字列であるか？」は判
	定できません）。
また、textはASCIIないしはUTF-8を想定していることに注意して
	ください（UTF-16BEなどを与えた場合に誤検知する可能性が
	あります）。
*/
inline bool IsNullOrEmpty(const char* text)
{
	return(!((nullptr != text) && (0x00 != *text)));
}

/* ********************************************************* */
//! テキストが同じであるかを判定
/*!
@param	lhs
	テキスト1
@param	rhs
	テキスト2
@param	length
	判定最大バイトサイズ

@retval	関数値
	true == 同一
	false == 異なる

2つの文字列を比較して同じかどうかを判定します。
大小文字・半全角の違いは別の文字と判定します。
注意する点として、現状UTF-8での「合成文字」と「基本文字＋拡張
文字」は同一とは判定しません（例えば「バ」と「ハ＋゛」は異なる
文字と判定します）。
*/
bool Compare(const char* lhs, const char* rhs, size_t length=0);
}	/* Text */

/* -------------------------------------------------------------------------- */
/*                                                                  Variables */
/* -------------------------------------------------------------------------- */

/* -------------------------------------------------------------------------- */
/*                                    Inline-Functions / Function-Type Macros */
/* -------------------------------------------------------------------------- */

/* -------------------------------------------------------------------------- */
/*                                                        Function Prototypes */
/* -------------------------------------------------------------------------- */
}	/* Utility */
}	/* Library */
}	/* SpriteStudio6 */

