/**
	SS6Player for CPP(C++/ssbp2)

	Copyright(C) Web Technology Corp.
	All rights reserved.
*/
/* ========================================================================== */
/* MEMO:                                                                      */
/* SS6PlayerでSSPJを変換したデータを扱うためのクラスです。                    */
/* 現実的に、SpriteStudio6::Library::Data::Project::Projectクラスをラッピング */
/* して機能拡張するためのものです。                                           */
/* ========================================================================== */
#pragma once

/* -------------------------------------------------------------------------- */
/*                                                 Includes / Compile-Options */
/* -------------------------------------------------------------------------- */
#include "ss6player_platform.h"
#include "../Library/ss6player_data.h"
#include "../Library/ss6player_data_project.h"

namespace SpriteStudio6	{
/* -------------------------------------------------------------------------- */
/*                                                Defines (Value-Type Macros) */
/* -------------------------------------------------------------------------- */

/* -------------------------------------------------------------------------- */
/*                                            Classes / Structures / Typedefs */
/* -------------------------------------------------------------------------- */
/* プロジェクトデータ管理 */
class Project
{
	/* ----------------------------------------------- Classes, Structs,Interfaces & Typedefs */
private:
protected:
public:

	/* ----------------------------------------------- Enums & Constants */
private:
protected:
public:

	/* ----------------------------------------------- Variables */
private:
	const void* Raw;									/* データの生ポインタ */
	SpriteStudio6::Texture* InstanceTexture;			/* 内包テクスチャ管理クラスの実体 */

protected:
public:
	Library::Data::Project::Project Data;				/* プロジェクト情報 */

	Library::Data::Project::CellMap CellMap;			/* セルマップ情報 */
	Sint16* TableIndexTexture;							/* セルマップが使用しているテクスチャテーブル */

	Library::Data::Project::Animation* Animation;		/* アニメーション情報 */

	Library::Data::Project::Effect* Effect;				/* エフェクト情報 */

	Library::Data::Project::Sequence* Sequence;			/* シーケンス情報 */

	/* MEMO: 他クラスの実装との兼ね合いもありpublicになっていますが、 */
	/*       みだりに外部から直接操作しないでください。               */
	SpriteStudio6::Texture** Texture;					/* 使用するテクスチャ管理クラスのポインタ */

	/* ----------------------------------------------- Functions */
private:
	void CleanUp(void);

protected:
public:
	/* ********************************************************* */
	//! コンストラクタ
	/*!
	@param	なし

	@retval	なし
	*/
	Project(void);

	/* ********************************************************* */
	//! デストラクタ
	/*!
	@param	なし

	@retval	なし

	本クラスを継承する場合を考慮して、仮想デストラクタになっています。
	*/
	virtual ~Project(void);

	/* ********************************************************* */
	//! 本クラスが有効か？
	/*!
	@param	なし

	@retval	関数値
		true == 有効
		false == 無効

	本クラスが描画用として使用可能かを返します。
	*/
	inline bool IsValid(void) const
	{
		return(nullptr != Raw);	/* ? true : false */
	}

	/* ********************************************************* */
	//! 本クラスの起動（実行用初期化）
	/*!
	@param	data
		SSFB2データのメモリポインタ

	@retval	関数値
		true == 成功
		false == 失敗

	本クラスにアニメーションデータを設定して・起動します。
	本クラスにデータを設定後、本クラスに使用しているテクスチャを
		割り当てた後、エンティティ（ないしはシーケンサ）に本クラス
		を設定することでアニメーションが再生可能になります。
	単体の本クラスの実体を複数のエンティティに割り当てるようなこ
		とも可能です。
	*/
	bool BootUp(const void* data);

	/* ********************************************************* */
	//! 本クラスの終了（未使用化）
	/*!
	@param	なし

	@retval	関数値
		true == 成功
		false == 失敗

	本クラスの使用を終了します。
	また、本クラスをShutDown後であっても、使用していたテクスチャ群
		は裏で並列動作中の描画スレッドでGPUが使用している可能性が
		高いため、テクスチャなどの解放タイミングには注意してください。
		※描画で使用しているテクスチャを解放した場合、最悪GPUがハング
			アップします。
	*/
	void ShutDown(void);

	/* ********************************************************* */
	//! テクスチャ枚数を取得
	/*!
	@param	なし

	@retval	関数値
		テクスチャ枚数
		-1 == 失敗

	設定してあるデータが要求するテクスチャ枚数を取得します。
	原則として、データを作成する時に使用したSSPJファイル内に定義
		されているテクスチャ枚数（同一のテクスチャファイルを複数の
		SSCEで共有している場合がありえますので、必ずしもSSCE数と
		同じである保証はありません）。
	*/
	int CountGetTexture(void);

	/* ********************************************************* */
	//! テクスチャ名を取得
	/*!
	@param	index
		テクスチャ番号

	@retval	関数値
		テクスチャ名
		nullptr == 失敗

	番号に対応したテクスチャ名を取得します。
	indexは「0～(CountGetTexture()-1)」の範囲である必要があります。
	*/
	const char* NameGetTexture(int index);

	/* ********************************************************* */
	//! テクスチャを設定（初期起動）
	/*!
	@param	tableTexture
		テクスチャテーブル
	@param	tableIndexTexture
		セルマップ→テクスチャ番号変換テーブル

	@retval	関数値
		true == 成功
		false == 失敗

	プロジェクトテクスチャのデータを指定領域に複製します。
	tableTexture・tableIndexTextureの実体は必ずCountGetTexture個
		の配列である必要があります。

	本関数は必ず、本クラスのBootUp後に呼んでください。
	*/
	bool TextureBootUp(SpriteStudio6::Texture** tableTexture, Sint16* tableIndexTexture);

	/* ********************************************************* */
	//! テクスチャを設定（外部起動テクスチャ）
	/*!
	@param	index
		テクスチャ番号
	@param	texture
		テクスチャ情報

	@retval	関数値
		true == 成功
		false == 失敗

	番号に対応したテクスチャを設定します。
	本関数は、外部で起動したテクスチャを設定するための関数です
		（他のオンメモリのプロジェクトとテクスチャを共有したり
		する際に使用してください）。
	
	本関数で設定されたテクスチャは、ShutDownが実行された時でも
		（与えられた）テクスチャ管理クラスはShutDownされませんので
		注意してください。

	indexは「0～(CountGetTexture()-1)」の範囲である必要があります。
	textureは初期起動が終了した（Texture::Set後＝Texture::IsValidが
		trueである）状態である必要があります。
	*/
	bool TextureSet(int index, SpriteStudio6::Texture& texture);

	/* ********************************************************* */
	//! テクスチャを設定（本クラス内部生成テクスチャ）
	/*!
	@param	index
		テクスチャ番号
	@param	dataTexture
		テクスチャデータ

	@retval	関数値
		true == 成功
		false == 失敗

	番号に対応したテクスチャを設定します。
	本関数は、本クラス内部にテクスチャ管理クラスの実体を持つ形で
		初期化するための関数です（テクスチャのキャッシュへの登録
		なども行われます）。
	※特段の事由がなければ、（外部起動版TextureSet関数よりも）
		本関数を使用する方が様々な管理が楽になるはずです。

	本関数で設定されたテクスチャは、ShutDownが実行された時に内部
		的に保持していたテクスチャ管理クラスもShutDownされ・テクス
		チャキャッシュからも解放されます。

	indexは「0～(CountGetTexture()-1)」の範囲である必要があります。

	dataTextureがconst void*でないのは、プラットフォームによっては
		テクスチャデータのメモリイメージを書き換えるライブラリ処理
		があるのでconstが保障できないことが理由です。
	*/
	bool TextureSet(int index, void* dataTexture);

	/* ********************************************************* */
	//! 現在割り当たっているテクスチャを取得
	/*!
	@param	index
		テクスチャ番号

	@retval	関数値
		テクスチャ管理クラスのポインタ
		nullptr == 割り当たっていない（もしくはエラー）

	番号に対応したテクスチャのテクスチャ管理クラスを取得します。

	indexは「0～(CountGetTexture()-1)」の範囲である必要があります。

	運用上融通が利くように、関数値にconstを付けていませんが、アニ
		メーション中などにテクスチャの内容などを操作した場合に
		アニメーション再生状態が不安定になったり・何らかの障害が
		出る可能性があることに注意してください。
	*/
	SpriteStudio6::Texture* TextureGet(int index);

	/* ********************************************************* */
	//! セルマップ数を取得
	/*!
	@param	なし

	@retval	関数値
		セルマップ数
		-1 == 失敗

	保有しているセルマップ数を取得します。
	*/
	int CountGetCellMap(void);

	/* ********************************************************* */
	//! 名前からセルマップのインデックスを取得
	/*!
	@param	name
		検索するセルマップ名

	@retval	関数値
		セルマップのインデックス
		-1 == 失敗

	保有しているセルマップから指定名のセルマップのインデックスを
		返します。
	*/
	int IndexGetCellMap(const char* name);

	/* ********************************************************* */
	//! アニメーションパック数を取得
	/*!
	@param	なし

	@retval	関数値
		アニメーションパック数
		-1 == 失敗

	保有しているアニメーションパック（SS6のSSAEに相当）数を取得します。
	*/
	int CountGetAnimationPack(void);

	/* ********************************************************* */
	//! 名前からアニメーションパックのインデックスを取得
	/*!
	@param	name
		検索するアニメーションパック名

	@retval	関数値
		アニメーションパックのインデックス
		-1 == 見つからなかった

	保有しているアニメーションパックの中から指定名のアニメーション
		パックのインデックスを返します。
	nameはSS6データ上のプロジェクト内SSAE名です（拡張子は含みません）。
	*/
	int IndexGetAnimationPack(const char* name);

	/* ********************************************************* */
	//! シーケンスパック数を取得
	/*!
	@param	なし

	@retval	関数値
		シーケンスパック数
		-1 == 失敗

	保有しているシーケンスパック（SS6のSSQEに相当）数を指定します。
	*/
	int CountGetSequencePack(void);

	/* ********************************************************* */
	//! 名前からシーケンスパックのインデックスを取得
	/*!
	@param	name
		検索するシーケンスパック名

	@retval	関数値
		シーケンスパックのインデックス
		-1 == 見つからなかった

	保有しているシーケンスパックの中から指定名のシーケンスパックの
		インデックスを返します。
	nameはSS6データ上のプロジェクト内SSQE名です（拡張子は含みません）。
	*/
	int IndexGetSequencePack(const char* name);

	/* ----------------------------------------------- Functions (static) */
private:
protected:
public:

	/* ----------------------------------------------- Operators */

	/* ----------------------------------------------- Friends */
};

/* -------------------------------------------------------------------------- */
/*                                                                  Variables */
/* -------------------------------------------------------------------------- */

/* -------------------------------------------------------------------------- */
/*                                    Inline-Functions / Function-Type Macros */
/* -------------------------------------------------------------------------- */

/* -------------------------------------------------------------------------- */
/*                                                        Function Prototypes */
/* -------------------------------------------------------------------------- */

}	/* SpriteStudio6 */
